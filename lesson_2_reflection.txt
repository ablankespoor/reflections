What happens when you initialize a repository?  Why do you need to do it?

	The git init command makes a .git file in the directory, which 
	contains the git data used to track changes and all the other
	git stuff.  This is neccessary to start a git repo.

How is the staging area different from the working directory and the repository?What value do you think it offers?

	The staging area lets git know what files to commit and lets the 
	user select those files individually, and bundle them for a commit. 

How can you use the staging area to make sure you have one commit per logical change?

	Use the "git diff --staged" to check if the changes are significant 
	enough between the staged and committed versions.


What are some situations when branches would be helpful in keeping your
history organized?  How would branches help?

	Use "git branch" to see what branch I'm on. 
	Use "git branch [name of new]" to make a new branch.
	Use "git checkout [name of desired branch] to start working on it
	Branches would be useful to test or develop a parallel feature
	of the code.  Doing work on a branch would ensure the previous 
	development is not affected.

How do the diagrams help you visualize the branch structure?
	
	Use "git log --graph --oneline" to see the visual representation of
	the git history.  This helps to see the parents of a branch and the
	parallel development of the repo.

What is the result of merging two branges together?  Why do we represeent it
in the diagram the way we do?

	Use "git merge " and something about branch 1 and branch 2.  The 
	result is that the two parallel branches are combined into one.  
	Git is able to look at the parent paths and intellegently combine
	the two branches (unless there are conflicts that need to be 
	manually fixed).

My Notes:
To merge on a branch.  First, make sure to be in the branch (git checkout 
branch).  Then update the branch with any current changes on master 
(git merge master easy_mode).  If there is a conflict, then go into the 
file and look for HEAD and MASTER stuff.  Make the changes and resolve 
the conflic.  Finally, git add and git commit the changes.  Now the
lastest version of master is merged into the branch, for continued work on
the branch development.

What are the pros and cons of Git's automatic merging vs always doing the
merges manually?

	The trade off is between Git making the decision to merge or remove
	changes to the file.  Git can follow intelegent rules, but sometimes
	the author has to make the final decision to keep or reject a change.
